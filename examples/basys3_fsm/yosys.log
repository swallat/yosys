
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7+349 (git sha1 45cc1276, AppleClang 9.0.0.9000037,  -Wall -Wextra -MD  -Os -fPIC -ggdb)


-- Executing script file `run_yosys.ys' --

1. Executing Verilog-2005 frontend.
Parsing Verilog input from `example.v' to AST representation.
Generating RTLIL representation for module `\example'.
Note: Assuming pure combinatorial block at example.v:48 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at example.v:82 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing SYNTH_XILINX pass.

2.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\IBUF'.
Generating RTLIL representation for module `\OBUF'.
Generating RTLIL representation for module `\BUFG'.
Generating RTLIL representation for module `\INV'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\LUT5'.
Generating RTLIL representation for module `\LUT6'.
Generating RTLIL representation for module `\MUXCY'.
Generating RTLIL representation for module `\MUXF7'.
Generating RTLIL representation for module `\MUXF8'.
Generating RTLIL representation for module `\XORCY'.
Generating RTLIL representation for module `\CARRY4'.
Generating RTLIL representation for module `\FDRE'.
Generating RTLIL representation for module `\FDSE'.
Generating RTLIL representation for module `\FDCE'.
Generating RTLIL representation for module `\FDPE'.
Successfully finished Verilog frontend.

2.2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/cells_xtra.v' to AST representation.
Generating RTLIL representation for module `\BSCANE2'.
Generating RTLIL representation for module `\BUFGCE'.
Generating RTLIL representation for module `\BUFGCE_1'.
Generating RTLIL representation for module `\BUFGCTRL'.
Generating RTLIL representation for module `\BUFGMUX'.
Generating RTLIL representation for module `\BUFGMUX_1'.
Generating RTLIL representation for module `\BUFGMUX_CTRL'.
Generating RTLIL representation for module `\BUFH'.
Generating RTLIL representation for module `\BUFHCE'.
Generating RTLIL representation for module `\BUFIO'.
Generating RTLIL representation for module `\BUFMR'.
Generating RTLIL representation for module `\BUFMRCE'.
Generating RTLIL representation for module `\BUFR'.
Generating RTLIL representation for module `\CAPTUREE2'.
Generating RTLIL representation for module `\CFGLUT5'.
Generating RTLIL representation for module `\DCIRESET'.
Generating RTLIL representation for module `\DNA_PORT'.
Generating RTLIL representation for module `\DSP48E1'.
Generating RTLIL representation for module `\EFUSE_USR'.
Generating RTLIL representation for module `\FIFO18E1'.
Generating RTLIL representation for module `\FIFO36E1'.
Generating RTLIL representation for module `\FRAME_ECCE2'.
Generating RTLIL representation for module `\GTHE2_CHANNEL'.
Generating RTLIL representation for module `\GTHE2_COMMON'.
Generating RTLIL representation for module `\GTPE2_CHANNEL'.
Generating RTLIL representation for module `\GTPE2_COMMON'.
Generating RTLIL representation for module `\GTXE2_CHANNEL'.
Generating RTLIL representation for module `\GTXE2_COMMON'.
Generating RTLIL representation for module `\IBUF_IBUFDISABLE'.
Generating RTLIL representation for module `\IBUF_INTERMDISABLE'.
Generating RTLIL representation for module `\IBUFDS'.
Generating RTLIL representation for module `\IBUFDS_DIFF_OUT'.
Generating RTLIL representation for module `\IBUFDS_DIFF_OUT_IBUFDISABLE'.
Generating RTLIL representation for module `\IBUFDS_DIFF_OUT_INTERMDISABLE'.
Generating RTLIL representation for module `\IBUFDS_GTE2'.
Generating RTLIL representation for module `\IBUFDS_IBUFDISABLE'.
Generating RTLIL representation for module `\IBUFDS_INTERMDISABLE'.
Generating RTLIL representation for module `\ICAPE2'.
Generating RTLIL representation for module `\IDDR'.
Generating RTLIL representation for module `\IDDR_2CLK'.
Generating RTLIL representation for module `\IDELAYCTRL'.
Generating RTLIL representation for module `\IDELAYE2'.
Generating RTLIL representation for module `\IN_FIFO'.
Generating RTLIL representation for module `\IOBUF'.
Generating RTLIL representation for module `\IOBUF_DCIEN'.
Generating RTLIL representation for module `\IOBUF_INTERMDISABLE'.
Generating RTLIL representation for module `\IOBUFDS'.
Generating RTLIL representation for module `\IOBUFDS_DCIEN'.
Generating RTLIL representation for module `\IOBUFDS_DIFF_OUT'.
Generating RTLIL representation for module `\IOBUFDS_DIFF_OUT_DCIEN'.
Generating RTLIL representation for module `\IOBUFDS_DIFF_OUT_INTERMDISABLE'.
Generating RTLIL representation for module `\ISERDESE2'.
Generating RTLIL representation for module `\KEEPER'.
Generating RTLIL representation for module `\LDCE'.
Generating RTLIL representation for module `\LDPE'.
Generating RTLIL representation for module `\LUT6_2'.
Generating RTLIL representation for module `\MMCME2_ADV'.
Generating RTLIL representation for module `\MMCME2_BASE'.
Generating RTLIL representation for module `\OBUFDS'.
Generating RTLIL representation for module `\OBUFT'.
Generating RTLIL representation for module `\OBUFTDS'.
Generating RTLIL representation for module `\ODDR'.
Generating RTLIL representation for module `\ODELAYE2'.
Generating RTLIL representation for module `\OSERDESE2'.
Generating RTLIL representation for module `\OUT_FIFO'.
Generating RTLIL representation for module `\PHASER_IN'.
Generating RTLIL representation for module `\PHASER_IN_PHY'.
Generating RTLIL representation for module `\PHASER_OUT'.
Generating RTLIL representation for module `\PHASER_OUT_PHY'.
Generating RTLIL representation for module `\PHASER_REF'.
Generating RTLIL representation for module `\PHY_CONTROL'.
Generating RTLIL representation for module `\PLLE2_ADV'.
Generating RTLIL representation for module `\PLLE2_BASE'.
Generating RTLIL representation for module `\PULLDOWN'.
Generating RTLIL representation for module `\PULLUP'.
Generating RTLIL representation for module `\RAM128X1S'.
Generating RTLIL representation for module `\RAM256X1S'.
Generating RTLIL representation for module `\RAM32M'.
Generating RTLIL representation for module `\RAM32X1D'.
Generating RTLIL representation for module `\RAM32X1S'.
Generating RTLIL representation for module `\RAM32X1S_1'.
Generating RTLIL representation for module `\RAM32X2S'.
Generating RTLIL representation for module `\RAM64M'.
Generating RTLIL representation for module `\RAM64X1S'.
Generating RTLIL representation for module `\RAM64X1S_1'.
Generating RTLIL representation for module `\RAM64X2S'.
Generating RTLIL representation for module `\ROM128X1'.
Generating RTLIL representation for module `\ROM256X1'.
Generating RTLIL representation for module `\ROM32X1'.
Generating RTLIL representation for module `\ROM64X1'.
Generating RTLIL representation for module `\SRL16E'.
Generating RTLIL representation for module `\SRLC32E'.
Generating RTLIL representation for module `\STARTUPE2'.
Generating RTLIL representation for module `\USR_ACCESSE2'.
Generating RTLIL representation for module `\XADC'.
Successfully finished Verilog frontend.

2.3. Executing Verilog-2005 frontend.
Parsing Verilog input from `/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/brams_bb.v' to AST representation.
Generating RTLIL representation for module `\RAMB18E1'.
Generating RTLIL representation for module `\RAMB36E1'.
Successfully finished Verilog frontend.

2.4. Executing Verilog-2005 frontend.
Parsing Verilog input from `/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/drams_bb.v' to AST representation.
Generating RTLIL representation for module `\RAM64X1D'.
Generating RTLIL representation for module `\RAM128X1D'.
Successfully finished Verilog frontend.

2.5. Executing HIERARCHY pass (managing design hierarchy).

2.5.1. Analyzing design hierarchy..
Top module:  \example

2.5.2. Analyzing design hierarchy..
Top module:  \example
Removed 0 unused modules.

2.6. Executing SYNTH pass.

2.6.1. Executing PROC pass (convert processes to netlists).

2.6.1.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.6.1.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$example.v:82$14 in module example.
Removed 1 dead cases from process $proc$example.v:48$13 in module example.
Removed a total of 2 dead cases.

2.6.1.3. Executing PROC_INIT pass (extract init attributes).

2.6.1.4. Executing PROC_ARST pass (detect async resets in processes).

2.6.1.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\example.$proc$example.v:82$14'.
     1/5: $1\led[3:0] [2]
     2/5: $1\led[3:0] [1]
     3/5: $1\led[3:0] [3]
     4/5: $1\led[3:0] [0]
     5/5: $0\led[3:0]
Creating decoders for process `\example.$proc$example.v:48$13'.
     1/1: $0\next_state[1:0]
Creating decoders for process `\example.$proc$example.v:42$12'.
     1/1: $0\state[1:0]
Creating decoders for process `\example.$proc$example.v:29$6'.
     1/2: $0\PB_cnt[15:0]
     2/2: $0\PB_state[0:0]
Creating decoders for process `\example.$proc$example.v:22$3'.
     1/1: $0\PB_sync_1[0:0]
Creating decoders for process `\example.$proc$example.v:21$1'.
     1/1: $0\PB_sync_0[0:0]

2.6.1.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\example.\led' from process `\example.$proc$example.v:82$14'.
Latch inferred for signal `\example.\next_state' from process `\example.$proc$example.v:48$13': $auto$proc_dlatch.cc:409:proc_dlatch$61

2.6.1.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\example.\state' using process `\example.$proc$example.v:42$12'.
  created $dff cell `$procdff$90' with positive edge clock.
Creating register for signal `\example.\PB_state' using process `\example.$proc$example.v:29$6'.
  created $dff cell `$procdff$91' with positive edge clock.
Creating register for signal `\example.\PB_cnt' using process `\example.$proc$example.v:29$6'.
  created $dff cell `$procdff$92' with positive edge clock.
Creating register for signal `\example.\PB_sync_1' using process `\example.$proc$example.v:22$3'.
  created $dff cell `$procdff$93' with positive edge clock.
Creating register for signal `\example.\PB_sync_0' using process `\example.$proc$example.v:21$1'.
  created $dff cell `$procdff$94' with positive edge clock.

2.6.1.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\example.$proc$example.v:82$14'.
Removing empty process `example.$proc$example.v:82$14'.
Found and cleaned up 5 empty switches in `\example.$proc$example.v:48$13'.
Removing empty process `example.$proc$example.v:48$13'.
Removing empty process `example.$proc$example.v:42$12'.
Found and cleaned up 2 empty switches in `\example.$proc$example.v:29$6'.
Removing empty process `example.$proc$example.v:29$6'.
Removing empty process `example.$proc$example.v:22$3'.
Removing empty process `example.$proc$example.v:21$1'.
Cleaned up 8 empty switches.

2.6.2. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$procmux$19_CMP0' in module `example' with $logic_not.
Replacing $eq cell `$procmux$24_CMP0' in module `example' with $logic_not.
Replacing $eq cell `$procmux$29_CMP0' in module `example' with $logic_not.
Replacing $eq cell `$procmux$34_CMP0' in module `example' with $logic_not.
Replacing $eq cell `$procmux$51_CMP0' in module `example' with $logic_not.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$71' (const_or) in module `\example' with constant driver `$auto$rtlil.cc:1658:ReduceOr$72 = 1'1'.
Replacing $and cell `$auto$proc_dlatch.cc:251:make_hold$73' (and_or_buffer) in module `\example' with constant driver `$auto$rtlil.cc:1684:And$74 = $auto$rtlil.cc:1654:Not$70'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$75' (and_or_buffer) in module `\example' with constant driver `$auto$rtlil.cc:1658:ReduceOr$76 = $auto$rtlil.cc:1654:Not$70'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$79' (and_or_buffer) in module `\example' with constant driver `$auto$rtlil.cc:1658:ReduceOr$80 = $auto$rtlil.cc:1684:And$78'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$83' (and_or_buffer) in module `\example' with constant driver `$auto$rtlil.cc:1658:ReduceOr$84 = $auto$rtlil.cc:1684:And$82'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$87' (and_or_buffer) in module `\example' with constant driver `$auto$rtlil.cc:1658:ReduceOr$88 = $auto$rtlil.cc:1684:And$86'.

2.6.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \example..
  removed 28 unused temporary wires.
Removed 0 unused cells and 28 unused wires.

2.6.4. Executing CHECK pass (checking for obvious problems).
checking module example..
found and reported 0 problems.

2.6.5. Executing OPT pass (performing simple optimizations).

2.6.5.1. Executing OPT_EXPR pass (perform const folding).

2.6.5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\example'.
  Cell `$procmux$21_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$21_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$21_CMP0' from module `\example'.
  Cell `$procmux$22_CMP0' is identical to cell `$procmux$17_CMP0'.
    Redirecting output \Y: $procmux$22_CMP = $procmux$17_CMP
    Removing $eq cell `$procmux$22_CMP0' from module `\example'.
  Cell `$procmux$23_CMP0' is identical to cell `$procmux$18_CMP0'.
    Redirecting output \Y: $procmux$23_CMP = $procmux$18_CMP
    Removing $eq cell `$procmux$23_CMP0' from module `\example'.
  Cell `$procmux$24_CMP0' is identical to cell `$procmux$19_CMP0'.
    Redirecting output \Y: $procmux$24_CMP = $procmux$19_CMP
    Removing $logic_not cell `$procmux$24_CMP0' from module `\example'.
  Cell `$procmux$26_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$26_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$26_CMP0' from module `\example'.
  Cell `$procmux$27_CMP0' is identical to cell `$procmux$17_CMP0'.
    Redirecting output \Y: $procmux$27_CMP = $procmux$17_CMP
    Removing $eq cell `$procmux$27_CMP0' from module `\example'.
  Cell `$procmux$28_CMP0' is identical to cell `$procmux$18_CMP0'.
    Redirecting output \Y: $procmux$28_CMP = $procmux$18_CMP
    Removing $eq cell `$procmux$28_CMP0' from module `\example'.
  Cell `$procmux$29_CMP0' is identical to cell `$procmux$19_CMP0'.
    Redirecting output \Y: $procmux$29_CMP = $procmux$19_CMP
    Removing $logic_not cell `$procmux$29_CMP0' from module `\example'.
  Cell `$procmux$31_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$31_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$31_CMP0' from module `\example'.
  Cell `$procmux$32_CMP0' is identical to cell `$procmux$17_CMP0'.
    Redirecting output \Y: $procmux$32_CMP = $procmux$17_CMP
    Removing $eq cell `$procmux$32_CMP0' from module `\example'.
  Cell `$procmux$33_CMP0' is identical to cell `$procmux$18_CMP0'.
    Redirecting output \Y: $procmux$33_CMP = $procmux$18_CMP
    Removing $eq cell `$procmux$33_CMP0' from module `\example'.
  Cell `$procmux$34_CMP0' is identical to cell `$procmux$19_CMP0'.
    Redirecting output \Y: $procmux$34_CMP = $procmux$19_CMP
    Removing $logic_not cell `$procmux$34_CMP0' from module `\example'.
  Cell `$procmux$39_CMP0' is identical to cell `$procmux$16_CMP0'.
    Redirecting output \Y: $procmux$39_CMP = $procmux$16_CMP
    Removing $eq cell `$procmux$39_CMP0' from module `\example'.
  Cell `$procmux$43_CMP0' is identical to cell `$procmux$17_CMP0'.
    Redirecting output \Y: $procmux$43_CMP = $procmux$17_CMP
    Removing $eq cell `$procmux$43_CMP0' from module `\example'.
  Cell `$procmux$47_CMP0' is identical to cell `$procmux$18_CMP0'.
    Redirecting output \Y: $procmux$47_CMP = $procmux$18_CMP
    Removing $eq cell `$procmux$47_CMP0' from module `\example'.
  Cell `$procmux$51_CMP0' is identical to cell `$procmux$19_CMP0'.
    Redirecting output \Y: $procmux$51_CMP = $procmux$19_CMP
    Removing $logic_not cell `$procmux$51_CMP0' from module `\example'.
Removed a total of 16 cells.

2.6.5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \example..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$15 (pure)
    Root of a mux tree: $procmux$20 (pure)
    Root of a mux tree: $procmux$25 (pure)
    Root of a mux tree: $procmux$30 (pure)
    Root of a mux tree: $procmux$38 (pure)
    Root of a mux tree: $procmux$53 (pure)
    Root of a mux tree: $procmux$59 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.6.5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \example.
    New input vector for $reduce_and cell $reduce_and$example.v:27$5: { \PB_cnt [0] \PB_cnt [1] \PB_cnt [2] \PB_cnt [3] \PB_cnt [4] \PB_cnt [5] \PB_cnt [6] \PB_cnt [7] \PB_cnt [8] \PB_cnt [9] \PB_cnt [10] \PB_cnt [11] \PB_cnt [12] \PB_cnt [13] \PB_cnt [14] \PB_cnt [15] }
    New ctrl vector for $pmux cell $procmux$15: { $procmux$17_CMP $auto$opt_reduce.cc:132:opt_mux$96 }
    New ctrl vector for $pmux cell $procmux$20: { $procmux$18_CMP $auto$opt_reduce.cc:132:opt_mux$98 }
    New ctrl vector for $pmux cell $procmux$25: { $auto$opt_reduce.cc:132:opt_mux$100 $procmux$16_CMP }
    New ctrl vector for $pmux cell $procmux$30: { $procmux$19_CMP $auto$opt_reduce.cc:132:opt_mux$102 }
    New ctrl vector for $pmux cell $procmux$38: { $procmux$18_CMP $procmux$17_CMP $procmux$16_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$95: { $procmux$16_CMP $procmux$18_CMP $procmux$19_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$97: { $procmux$16_CMP $procmux$17_CMP $procmux$19_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$99: { $procmux$17_CMP $procmux$18_CMP $procmux$19_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$101: { $procmux$16_CMP $procmux$17_CMP $procmux$18_CMP }
  Optimizing cells in module \example.
Performed a total of 10 changes.

2.6.5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\example'.
Removed a total of 0 cells.

2.6.5.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \example..
  removed 16 unused temporary wires.
Removed 0 unused cells and 44 unused wires.

2.6.5.8. Executing OPT_EXPR pass (perform const folding).

2.6.5.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.5.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \example..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$15 (pure)
    Root of a mux tree: $procmux$20 (pure)
    Root of a mux tree: $procmux$25 (pure)
    Root of a mux tree: $procmux$30 (pure)
    Root of a mux tree: $procmux$38 (pure)
    Root of a mux tree: $procmux$53 (pure)
    Root of a mux tree: $procmux$59 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.6.5.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \example.
Performed a total of 0 changes.

2.6.5.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\example'.
Removed a total of 0 cells.

2.6.5.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.5.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \example..
Removed 0 unused cells and 44 unused wires.

2.6.5.15. Executing OPT_EXPR pass (perform const folding).

2.6.5.16. Finished OPT passes. (There is nothing left to do.)

2.6.6. Executing WREDUCE pass (reducing word size of cells).
Removed top 15 bits (of 16) from port B of cell example.$add$example.v:34$7 ($add).
Removed top 1 bits (of 2) from port B of cell example.$procmux$18_CMP0 ($eq).
Removed top 1 bits (of 2) from mux cell example.$procmux$41 ($mux).
Removed top 1 bits (of 2) from mux cell example.$procmux$49 ($mux).
Removed top 1 bits (of 2) from wire example.$procmux$41_Y.
Removed top 1 bits (of 2) from wire example.$procmux$49_Y.

2.6.7. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module example:
  creating $macc model for $add$example.v:34$7 ($add).
  creating $alu model for $macc $add$example.v:34$7.
  creating $alu cell for $add$example.v:34$7: $auto$alumacc.cc:474:replace_alu$105
  created 1 $alu and 0 $macc cells.

2.6.8. Executing SHARE pass (SAT-based resource sharing).

2.6.9. Executing OPT pass (performing simple optimizations).

2.6.9.1. Executing OPT_EXPR pass (perform const folding).

2.6.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\example'.
Removed a total of 0 cells.

2.6.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \example..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$15 (pure)
    Root of a mux tree: $procmux$20 (pure)
    Root of a mux tree: $procmux$25 (pure)
    Root of a mux tree: $procmux$30 (pure)
    Root of a mux tree: $procmux$38 (pure)
    Root of a mux tree: $procmux$53 (pure)
    Root of a mux tree: $procmux$59 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.6.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \example.
Performed a total of 0 changes.

2.6.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\example'.
  Cell `$procmux$49' is identical to cell `$procmux$41'.
    Redirecting output \Y: $auto$wreduce.cc:347:run$104 [0] = $auto$wreduce.cc:347:run$103 [0]
    Removing $mux cell `$procmux$49' from module `\example'.
Removed a total of 1 cells.

2.6.9.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \example..
  removed 3 unused temporary wires.
Removed 0 unused cells and 47 unused wires.

2.6.9.8. Executing OPT_EXPR pass (perform const folding).

2.6.9.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \example..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$15 (pure)
    Root of a mux tree: $procmux$20 (pure)
    Root of a mux tree: $procmux$25 (pure)
    Root of a mux tree: $procmux$30 (pure)
    Root of a mux tree: $procmux$38 (pure)
    Root of a mux tree: $procmux$53 (pure)
    Root of a mux tree: $procmux$59 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.6.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \example.
Performed a total of 0 changes.

2.6.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\example'.
Removed a total of 0 cells.

2.6.9.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \example..
Removed 0 unused cells and 47 unused wires.

2.6.9.15. Executing OPT_EXPR pass (perform const folding).

2.6.9.16. Finished OPT passes. (There is nothing left to do.)

2.6.10. Executing FSM pass (extract and optimize FSM).

2.6.10.1. Executing FSM_DETECT pass (finding FSMs in design).

2.6.10.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.6.10.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.6.10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \example..
Removed 0 unused cells and 47 unused wires.

2.6.10.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.6.10.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.6.10.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.6.10.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.6.11. Executing OPT pass (performing simple optimizations).

2.6.11.1. Executing OPT_EXPR pass (perform const folding).

2.6.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\example'.
Removed a total of 0 cells.

2.6.11.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \example..
Removed 0 unused cells and 47 unused wires.

2.6.11.5. Finished fast OPT passes.

2.6.12. Executing MEMORY pass.

2.6.12.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.6.12.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \example..
Removed 0 unused cells and 47 unused wires.

2.6.12.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.6.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \example..
Removed 0 unused cells and 47 unused wires.

2.6.12.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.6.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \example..
Removed 0 unused cells and 47 unused wires.

2.7. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.8. Executing TECHMAP pass (map to technology primitives).

2.8.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__XILINX_RAMB36_SDP'.
Generating RTLIL representation for module `\$__XILINX_RAMB18_SDP'.
Generating RTLIL representation for module `\$__XILINX_RAMB36_TDP'.
Generating RTLIL representation for module `\$__XILINX_RAMB18_TDP'.
Successfully finished Verilog frontend.
No more expansions possible.

2.9. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.10. Executing TECHMAP pass (map to technology primitives).

2.10.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/drams_map.v' to AST representation.
Generating RTLIL representation for module `\$__XILINX_RAM64X1D'.
Generating RTLIL representation for module `\$__XILINX_RAM128X1D'.
Successfully finished Verilog frontend.
No more expansions possible.

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimized away 1 select inputs of $pmux cell `$procmux$15' in module `example'.
Optimized away 1 select inputs of $pmux cell `$procmux$20' in module `example'.
Replacing $pmux cell `$procmux$25' (mux_sel01) in module `\example' with constant driver `\led [3] = $procmux$16_CMP'.
Optimized away 1 select inputs of $pmux cell `$procmux$30' in module `example'.
Replacing $mux cell `$procmux$41' (mux_bool) in module `\example' with constant driver `$auto$wreduce.cc:347:run$103 [0] = \PB_up'.
Replacing $mux cell `$procmux$15' in module `example' with inverter.
Replacing $mux cell `$procmux$20' in module `example' with inverter.
Replacing $mux cell `$procmux$30' in module `example' with inverter.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\example'.
Removed a total of 0 cells.

2.11.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \example..
  removing unused `$reduce_or' cell `$auto$opt_reduce.cc:126:opt_mux$99'.
  removed 3 unused temporary wires.
Removed 1 unused cells and 50 unused wires.

2.11.5. Finished fast OPT passes.

2.12. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.13. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.14. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Transforming FF to FF+Enable cells in module example:
  created $dffe cell $auto$dff2dffe.cc:215:handle_dff_cell$112 for $0\PB_state[0:0] -> \PB_state.
  removing now obsolete cell $procdff$91.

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Replacing $ne cell `$auto$dff2dffe.cc:159:make_patterns_logic$116' in module `example' with inverter.
Replacing $ne cell `$auto$dff2dffe.cc:159:make_patterns_logic$114' in module `example' with $logic_not.
Replacing $mux cell `$procmux$56' (mux_empty) in module `\example' with constant driver `$procmux$56_Y = $not$example.v:35$8_Y'.
Replacing $mux cell `$procmux$59' (mux_empty) in module `\example' with constant driver `$0\PB_state[0:0] = $procmux$56_Y'.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\example'.
Removed a total of 0 cells.

2.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \example..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$38 (pure)
    Root of a mux tree: $procmux$53 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \example.
    Consolidated identical input bits for $mux cell $procmux$36:
      Old ports: A=2'11, B=2'00, Y=$procmux$36_Y
      New ports: A=1'1, B=1'0, Y=$procmux$36_Y [0]
      New connections: $procmux$36_Y [1] = $procmux$36_Y [0]
  Optimizing cells in module \example.
Performed a total of 1 changes.

2.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\example'.
Removed a total of 0 cells.

2.15.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \example..
  removed 2 unused temporary wires.
Removed 1 unused cells and 52 unused wires.

2.15.8. Executing OPT_EXPR pass (perform const folding).
Replacing $mux cell `$procmux$36' in module `example' with inverter.

2.15.9. Rerunning OPT passes. (Maybe there is more to do..)

2.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \example..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$38 (pure)
    Root of a mux tree: $procmux$53 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \example.
Performed a total of 0 changes.

2.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\example'.
  Cell `$not$example.v:37$9' is identical to cell `$auto$dff2dffe.cc:159:make_patterns_logic$116'.
    Redirecting output \Y: $not$example.v:37$9_Y = $auto$dff2dffe.cc:158:make_patterns_logic$115
    Removing $not cell `$not$example.v:37$9' from module `\example'.
Removed a total of 1 cells.

2.15.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \example..
  removed 1 unused temporary wires.
Removed 1 unused cells and 53 unused wires.

2.15.15. Executing OPT_EXPR pass (perform const folding).

2.15.16. Rerunning OPT passes. (Maybe there is more to do..)

2.15.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \example..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$38 (pure)
    Root of a mux tree: $procmux$53 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.15.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \example.
Performed a total of 0 changes.

2.15.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\example'.
Removed a total of 0 cells.

2.15.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \example..
Removed 1 unused cells and 53 unused wires.

2.15.22. Executing OPT_EXPR pass (perform const folding).

2.15.23. Finished OPT passes. (There is nothing left to do.)

2.16. Executing TECHMAP pass (map to technology primitives).

2.16.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/Users/eve/Uni/yosys/cmake-build-debug/share/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.16.2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_xilinx_lcu'.
Generating RTLIL representation for module `\_80_xilinx_alu'.
Successfully finished Verilog frontend.
Mapping example.$not$example.v:21$2 ($not) with simplemap.
Mapping example.$eq$example.v:26$4 ($eq) with simplemap.
Mapping example.$reduce_and$example.v:27$5 ($reduce_and) with simplemap.
Mapping example.$not$example.v:35$8 ($not) with simplemap.
Mapping example.$and$example.v:37$10 ($and) with simplemap.
Mapping example.$and$example.v:37$11 ($and) with simplemap.
Mapping example.$procmux$16_CMP0 ($eq) with simplemap.
Mapping example.$procmux$15 ($not) with simplemap.
Mapping example.$procmux$17_CMP0 ($eq) with simplemap.
Mapping example.$procmux$18_CMP0 ($eq) with simplemap.
Mapping example.$procmux$19_CMP0 ($logic_not) with simplemap.
Mapping example.$procmux$20 ($not) with simplemap.

2.16.3. Executing AST frontend in derive mode using pre-parsed AST for module `\_80_xilinx_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 1
Parameter \B_WIDTH = 16
Parameter \Y_WIDTH = 16
Generating RTLIL representation for module `$paramod\_80_xilinx_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16'.

2.16.4. Continuing TECHMAP pass.
Mapping example.$auto$alumacc.cc:474:replace_alu$105 using $paramod\_80_xilinx_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16.
Mapping example.$auto$dff2dffe.cc:176:make_patterns_logic$118 ($reduce_and) with simplemap.
Mapping example.$auto$dff2dffe.cc:159:make_patterns_logic$116 ($not) with simplemap.
Mapping example.$auto$dff2dffe.cc:159:make_patterns_logic$114 ($reduce_bool) with simplemap.
Mapping example.$procmux$30 ($not) with simplemap.
Mapping example.$auto$opt_reduce.cc:126:opt_mux$101 ($reduce_or) with simplemap.
Mapping example.$auto$dff2dffe.cc:215:handle_dff_cell$112 ($dffe) with simplemap.
Mapping example.$procmux$36 ($not) with simplemap.

2.16.5. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 2
Parameter \S_WIDTH = 3
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=2\S_WIDTH=3'.

2.16.6. Continuing TECHMAP pass.
Mapping example.$procmux$38 using $paramod\_90_pmux\WIDTH=2\S_WIDTH=3.
Mapping example.$procmux$45 ($mux) with simplemap.
Mapping example.$auto$opt_reduce.cc:126:opt_mux$97 ($reduce_or) with simplemap.
Mapping example.$auto$opt_reduce.cc:126:opt_mux$95 ($reduce_or) with simplemap.
Mapping example.$procmux$53 ($mux) with simplemap.
Mapping example.$auto$proc_dlatch.cc:409:proc_dlatch$61 ($dlatch) with simplemap.
Mapping example.$auto$proc_dlatch.cc:409:proc_dlatch$62 ($not) with simplemap.
Mapping example.$auto$proc_dlatch.cc:238:make_hold$63 ($not) with simplemap.
Mapping example.$auto$proc_dlatch.cc:238:make_hold$65 ($not) with simplemap.
Mapping example.$auto$proc_dlatch.cc:238:make_hold$67 ($not) with simplemap.
Mapping example.$auto$proc_dlatch.cc:238:make_hold$69 ($not) with simplemap.
Mapping example.$auto$proc_dlatch.cc:251:make_hold$77 ($and) with simplemap.
Mapping example.$auto$proc_dlatch.cc:251:make_hold$81 ($and) with simplemap.
Mapping example.$auto$proc_dlatch.cc:251:make_hold$85 ($and) with simplemap.
Mapping example.$procdff$90 ($dff) with simplemap.
Mapping example.$procdff$92 ($dff) with simplemap.
Mapping example.$procdff$93 ($dff) with simplemap.
Mapping example.$procdff$94 ($dff) with simplemap.
Mapping example.$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$241 ($and) with simplemap.
Mapping example.$techmap$auto$alumacc.cc:474:replace_alu$105.$not$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$240 ($not) with simplemap.
Mapping example.$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:70$239 ($and) with simplemap.
Mapping example.$techmap$auto$alumacc.cc:474:replace_alu$105.$xor$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:69$238 ($xor) with simplemap.
Mapping example.$techmap$auto$alumacc.cc:474:replace_alu$105.$ternary$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:67$237 ($mux) with simplemap.
Mapping example.$techmap$auto$alumacc.cc:474:replace_alu$105.$not$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:67$236 ($not) with simplemap.
Mapping example.$auto$alumacc.cc:474:replace_alu$105.B_conv ($pos) with simplemap.
Mapping example.$auto$alumacc.cc:474:replace_alu$105.A_conv ($pos) with simplemap.
Mapping example.$techmap$procmux$38.$reduce_or$/Users/eve/Uni/yosys/cmake-build-debug/share/techmap.v:441$260 ($reduce_or) with simplemap.
Mapping example.$techmap$procmux$38.$reduce_or$/Users/eve/Uni/yosys/cmake-build-debug/share/techmap.v:441$259 ($reduce_or) with simplemap.
Mapping example.$techmap$procmux$38.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/techmap.v:434$258 ($and) with simplemap.
Mapping example.$techmap$procmux$38.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/techmap.v:434$257 ($and) with simplemap.
Mapping example.$techmap$procmux$38.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/techmap.v:434$256 ($and) with simplemap.
Mapping example.$techmap$procmux$38.$ternary$/Users/eve/Uni/yosys/cmake-build-debug/share/techmap.v:445$255 ($mux) with simplemap.
Mapping example.$techmap$procmux$38.$reduce_or$/Users/eve/Uni/yosys/cmake-build-debug/share/techmap.v:445$254 ($reduce_or) with simplemap.
No more expansions possible.

2.17. Executing OPT pass (performing simple optimizations).

2.17.1. Executing OPT_EXPR pass (perform const folding).
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$290' (double_invert) in module `\example' with constant driver `$auto$rtlil.cc:1654:Not$64 = $auto$simplemap.cc:168:logic_reduce$232'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$225' (?0) in module `\example' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$222 [1] = \state [1]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$291' (double_invert) in module `\example' with constant driver `$auto$rtlil.cc:1654:Not$66 = $auto$simplemap.cc:256:simplemap_eqne$226'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$214' (?0) in module `\example' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$212 [0] = \state [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$292' (double_invert) in module `\example' with constant driver `$auto$rtlil.cc:1654:Not$68 = $auto$simplemap.cc:256:simplemap_eqne$216'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$293' (double_invert) in module `\example' with constant driver `$auto$rtlil.cc:1654:Not$70 = $auto$simplemap.cc:256:simplemap_eqne$205'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$381' (??0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$ternary$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:67$237_Y [0] = \PB_cnt [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$349' (and_or_buffer) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:70$239_Y [0] = \PB_cnt [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$244' (double_invert) in module `\example' with constant driver `$auto$dff2dffe.cc:158:make_patterns_logic$115 = $auto$simplemap.cc:250:simplemap_eqne$172'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$262' (01?) in module `\example' with constant driver `$procmux$45_Y [1] = \PB_up'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$271' in module `example'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$272' in module `example'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$273' in module `example'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$274' in module `example'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$275' in module `example'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$276' in module `example'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$277' in module `example'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$278' in module `example'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$279' in module `example'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$280' in module `example'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$281' in module `example'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$282' in module `example'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$283' in module `example'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$284' in module `example'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$285' in module `example'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$286' in module `example'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$382' (??0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$ternary$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:67$237_Y [1] = \PB_cnt [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$350' (const_and) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:70$239_Y [1] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$334' (0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$not$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$240_Y [1] = 1'1'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$366' (0?) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$xor$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:69$238_Y [1] = \PB_cnt [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$318' (and_or_buffer) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$241_Y [1] = \PB_cnt [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$383' (??0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$ternary$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:67$237_Y [2] = \PB_cnt [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$351' (const_and) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:70$239_Y [2] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$335' (0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$not$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$240_Y [2] = 1'1'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$367' (0?) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$xor$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:69$238_Y [2] = \PB_cnt [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$319' (and_or_buffer) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$241_Y [2] = \PB_cnt [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$384' (??0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$ternary$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:67$237_Y [3] = \PB_cnt [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$352' (const_and) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:70$239_Y [3] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$336' (0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$not$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$240_Y [3] = 1'1'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$368' (0?) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$xor$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:69$238_Y [3] = \PB_cnt [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$320' (and_or_buffer) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$241_Y [3] = \PB_cnt [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$385' (??0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$ternary$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:67$237_Y [4] = \PB_cnt [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$353' (const_and) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:70$239_Y [4] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$337' (0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$not$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$240_Y [4] = 1'1'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$369' (0?) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$xor$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:69$238_Y [4] = \PB_cnt [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$321' (and_or_buffer) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$241_Y [4] = \PB_cnt [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$386' (??0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$ternary$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:67$237_Y [5] = \PB_cnt [5]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$354' (const_and) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:70$239_Y [5] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$338' (0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$not$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$240_Y [5] = 1'1'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$370' (0?) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$xor$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:69$238_Y [5] = \PB_cnt [5]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$322' (and_or_buffer) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$241_Y [5] = \PB_cnt [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$387' (??0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$ternary$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:67$237_Y [6] = \PB_cnt [6]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$355' (const_and) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:70$239_Y [6] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$339' (0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$not$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$240_Y [6] = 1'1'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$371' (0?) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$xor$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:69$238_Y [6] = \PB_cnt [6]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$323' (and_or_buffer) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$241_Y [6] = \PB_cnt [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$388' (??0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$ternary$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:67$237_Y [7] = \PB_cnt [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$356' (const_and) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:70$239_Y [7] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$340' (0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$not$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$240_Y [7] = 1'1'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$372' (0?) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$xor$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:69$238_Y [7] = \PB_cnt [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$324' (and_or_buffer) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$241_Y [7] = \PB_cnt [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$389' (??0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$ternary$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:67$237_Y [8] = \PB_cnt [8]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$357' (const_and) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:70$239_Y [8] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$341' (0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$not$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$240_Y [8] = 1'1'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$373' (0?) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$xor$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:69$238_Y [8] = \PB_cnt [8]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$325' (and_or_buffer) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$241_Y [8] = \PB_cnt [8]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$390' (??0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$ternary$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:67$237_Y [9] = \PB_cnt [9]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$358' (const_and) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:70$239_Y [9] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$342' (0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$not$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$240_Y [9] = 1'1'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$374' (0?) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$xor$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:69$238_Y [9] = \PB_cnt [9]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$326' (and_or_buffer) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$241_Y [9] = \PB_cnt [9]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$391' (??0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$ternary$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:67$237_Y [10] = \PB_cnt [10]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$359' (const_and) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:70$239_Y [10] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$343' (0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$not$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$240_Y [10] = 1'1'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$375' (0?) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$xor$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:69$238_Y [10] = \PB_cnt [10]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$327' (and_or_buffer) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$241_Y [10] = \PB_cnt [10]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$392' (??0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$ternary$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:67$237_Y [11] = \PB_cnt [11]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$360' (const_and) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:70$239_Y [11] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$344' (0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$not$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$240_Y [11] = 1'1'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$376' (0?) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$xor$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:69$238_Y [11] = \PB_cnt [11]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$328' (and_or_buffer) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$241_Y [11] = \PB_cnt [11]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$393' (??0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$ternary$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:67$237_Y [12] = \PB_cnt [12]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$361' (const_and) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:70$239_Y [12] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$345' (0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$not$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$240_Y [12] = 1'1'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$377' (0?) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$xor$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:69$238_Y [12] = \PB_cnt [12]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$329' (and_or_buffer) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$241_Y [12] = \PB_cnt [12]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$394' (??0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$ternary$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:67$237_Y [13] = \PB_cnt [13]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$362' (const_and) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:70$239_Y [13] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$346' (0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$not$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$240_Y [13] = 1'1'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$378' (0?) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$xor$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:69$238_Y [13] = \PB_cnt [13]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$330' (and_or_buffer) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$241_Y [13] = \PB_cnt [13]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$395' (??0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$ternary$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:67$237_Y [14] = \PB_cnt [14]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$363' (const_and) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:70$239_Y [14] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$347' (0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$not$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$240_Y [14] = 1'1'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$379' (0?) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$xor$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:69$238_Y [14] = \PB_cnt [14]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$331' (and_or_buffer) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$241_Y [14] = \PB_cnt [14]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$396' (??0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$ternary$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:67$237_Y [15] = \PB_cnt [15]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$364' (const_and) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:70$239_Y [15] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$348' (0) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$not$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$240_Y [15] = 1'1'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$380' (0?) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$xor$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:69$238_Y [15] = \PB_cnt [15]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$332' (and_or_buffer) in module `\example' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$105.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$241_Y [15] = \PB_cnt [15]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$424' (and_or_buffer) in module `\example' with constant driver `$techmap$procmux$38.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/techmap.v:434$257_Y [1] = $procmux$17_CMP'.

2.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\example'.
  Cell `$auto$simplemap.cc:37:simplemap_not$333' is identical to cell `$auto$simplemap.cc:37:simplemap_not$397'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:474:replace_alu$105.$not$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:72$240_Y [0] = $techmap$auto$alumacc.cc:474:replace_alu$105.$not$/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/arith_map.v:67$236_Y [0]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$333' from module `\example'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$203' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$224'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$201 [0] = $auto$simplemap.cc:250:simplemap_eqne$222 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$203' from module `\example'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$204' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$215'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$201 [1] = $auto$simplemap.cc:250:simplemap_eqne$212 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$204' from module `\example'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$425' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$426'.
    Redirecting output \Y: $techmap$procmux$38.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/techmap.v:434$256_Y [0] = $techmap$procmux$38.$and$/Users/eve/Uni/yosys/cmake-build-debug/share/techmap.v:434$256_Y [1]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$425' from module `\example'.
  Cell `$auto$simplemap.cc:37:simplemap_not$253' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$261'.
    Redirecting output \Y: $procmux$36_Y [1] = $procmux$45_Y [0]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$253' from module `\example'.
Removed a total of 5 cells.

2.17.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \example..
  removing unused `\MUXCY' cell `$auto$alumacc.cc:474:replace_alu$105.slice[15].muxcy'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$398'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$399'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$400'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$401'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$402'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$403'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$404'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$405'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$406'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$407'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$408'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$409'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$410'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$411'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$412'.
  removed 53 unused temporary wires.
Removed 17 unused cells and 106 unused wires.

2.17.5. Finished fast OPT passes.

2.18. Executing ABC pass (technology mapping using ABC).

2.18.1. Extracting gate netlist of module `\example' to `<abc-temp-dir>/input.blif'..
Extracted 78 gates and 117 wires to a netlist network with 37 inputs and 27 outputs.

2.18.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: Currently "mfs" cannot process the network containing nodes with more than 6 fanins.
ABC: + write_blif <abc-temp-dir>/output.blif 

2.18.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       66
ABC RESULTS:        internal signals:       53
ABC RESULTS:           input signals:       37
ABC RESULTS:          output signals:       27
Removing temp directory.
Removed 0 unused cells and 85 unused wires.

2.19. Executing TECHMAP pass (map to technology primitives).

2.19.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/Users/eve/Uni/yosys/cmake-build-debug/share/xilinx/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.19.2. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 1
Parameter \LUT = 2'01
Generating RTLIL representation for module `$paramod\$lut\WIDTH=1\LUT=2'01'.

2.19.3. Continuing TECHMAP pass.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$465 using $paramod\$lut\WIDTH=1\LUT=2'01.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$464 using $paramod\$lut\WIDTH=1\LUT=2'01.
Mapping example.$auto$simplemap.cc:420:simplemap_dff$316 using \$_DFF_P_.
Mapping example.$auto$simplemap.cc:420:simplemap_dff$315 using \$_DFF_P_.

2.19.4. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 2
Parameter \LUT = 4'1001
Generating RTLIL representation for module `$paramod\$lut\WIDTH=2\LUT=4'1001'.

2.19.5. Continuing TECHMAP pass.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$436 using $paramod\$lut\WIDTH=2\LUT=4'1001.

2.19.6. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 2
Parameter \LUT = 4'0100
Generating RTLIL representation for module `$paramod\$lut\WIDTH=2\LUT=4'0100'.

2.19.7. Continuing TECHMAP pass.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$442 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping example.$auto$simplemap.cc:420:simplemap_dff$301 using \$_DFF_P_.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$443 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping example.$auto$simplemap.cc:420:simplemap_dff$302 using \$_DFF_P_.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$448 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping example.$auto$simplemap.cc:420:simplemap_dff$307 using \$_DFF_P_.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$449 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping example.$auto$simplemap.cc:420:simplemap_dff$308 using \$_DFF_P_.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$450 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping example.$auto$simplemap.cc:420:simplemap_dff$309 using \$_DFF_P_.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$451 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping example.$auto$simplemap.cc:420:simplemap_dff$310 using \$_DFF_P_.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$452 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping example.$auto$simplemap.cc:420:simplemap_dff$311 using \$_DFF_P_.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$453 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping example.$auto$simplemap.cc:420:simplemap_dff$312 using \$_DFF_P_.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$454 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping example.$auto$simplemap.cc:420:simplemap_dff$313 using \$_DFF_P_.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$455 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping example.$auto$simplemap.cc:420:simplemap_dff$314 using \$_DFF_P_.

2.19.8. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 8
Parameter \LUT = 256'1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Generating RTLIL representation for module `$paramod$fd981d57d953ba8dcac298d3386c951aac959b56\$lut'.

2.19.9. Continuing TECHMAP pass.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$435 using $paramod$fd981d57d953ba8dcac298d3386c951aac959b56\$lut.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$444 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping example.$auto$simplemap.cc:420:simplemap_dff$303 using \$_DFF_P_.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$445 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping example.$auto$simplemap.cc:420:simplemap_dff$304 using \$_DFF_P_.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$446 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping example.$auto$simplemap.cc:420:simplemap_dff$305 using \$_DFF_P_.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$447 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping example.$auto$simplemap.cc:420:simplemap_dff$306 using \$_DFF_P_.

2.19.10. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 4
Parameter \LUT = 16'1000000000000000
Generating RTLIL representation for module `$paramod\$lut\WIDTH=4\LUT=16'1000000000000000'.

2.19.11. Continuing TECHMAP pass.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$438 using $paramod\$lut\WIDTH=4\LUT=16'1000000000000000.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$440 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping example.$auto$simplemap.cc:420:simplemap_dff$299 using \$_DFF_P_.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$441 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping example.$auto$simplemap.cc:420:simplemap_dff$300 using \$_DFF_P_.

2.19.12. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 2
Parameter \LUT = 4'1000
Generating RTLIL representation for module `$paramod\$lut\WIDTH=2\LUT=4'1000'.

2.19.13. Continuing TECHMAP pass.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$437 using $paramod\$lut\WIDTH=2\LUT=4'1000.

2.19.14. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 6
Parameter \LUT = 64'0100000000000000000000000000000000000000000000000000000000000000
Generating RTLIL representation for module `$paramod$57619346c001bba14f685682aaa48a843cd5a7a5\$lut'.

2.19.15. Continuing TECHMAP pass.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$434 using $paramod$57619346c001bba14f685682aaa48a843cd5a7a5\$lut.
Mapping example.$auto$simplemap.cc:442:simplemap_dffe$252 using \$_DFFE_PP_.
Mapping example.$auto$simplemap.cc:420:simplemap_dff$297 using \$_DFF_P_.
Mapping example.$auto$simplemap.cc:420:simplemap_dff$298 using \$_DFF_P_.

2.19.16. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 5
Parameter \LUT = 32'10000000000000000000000000000000
Generating RTLIL representation for module `$paramod\$lut\WIDTH=5\LUT=32'10000000000000000000000000000000'.

2.19.17. Continuing TECHMAP pass.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$458 using $paramod\$lut\WIDTH=5\LUT=32'10000000000000000000000000000000.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$457 using $paramod\$lut\WIDTH=5\LUT=32'10000000000000000000000000000000.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$459 using $paramod\$lut\WIDTH=5\LUT=32'10000000000000000000000000000000.

2.19.18. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 8
Parameter \LUT = 256'1011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Generating RTLIL representation for module `$paramod$1d311d5a97e5a20f299bd141ca4ae0b97472fb28\$lut'.

2.19.19. Continuing TECHMAP pass.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$460 using $paramod$1d311d5a97e5a20f299bd141ca4ae0b97472fb28\$lut.

2.19.20. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 2
Parameter \LUT = 4'0001
Generating RTLIL representation for module `$paramod\$lut\WIDTH=2\LUT=4'0001'.

2.19.21. Continuing TECHMAP pass.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$463 using $paramod\$lut\WIDTH=2\LUT=4'0001.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$462 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$439 using $paramod\$lut\WIDTH=2\LUT=4'1000.

2.19.22. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 7
Parameter \LUT = 128'10111111111111111111111111111111111111111111111111111111111111110100000000000000000000000000000000000000000000000000000000000000
Generating RTLIL representation for module `$paramod$79eda2d0782d7ecfd3c364165cc674421bb17473\$lut'.

2.19.23. Continuing TECHMAP pass.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$456 using $paramod$79eda2d0782d7ecfd3c364165cc674421bb17473\$lut.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$461 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping example.$abc$433$auto$blifparse.cc:465:parse_blif$466 using $paramod\$lut\WIDTH=1\LUT=2'01.
No more expansions possible.

2.20. Executing DFFINIT pass (set INIT param on FF cells).
Setting example.$auto$simplemap.cc:420:simplemap_dff$314.INIT (port=Q, net=\PB_cnt [15]) to 1'0.
Setting example.$auto$simplemap.cc:420:simplemap_dff$315.INIT (port=Q, net=\PB_sync_1) to 1'0.
Setting example.$auto$simplemap.cc:420:simplemap_dff$300.INIT (port=Q, net=\PB_cnt [1]) to 1'0.
Setting example.$auto$simplemap.cc:420:simplemap_dff$306.INIT (port=Q, net=\PB_cnt [7]) to 1'0.
Setting example.$auto$simplemap.cc:420:simplemap_dff$299.INIT (port=Q, net=\PB_cnt [0]) to 1'0.
Setting example.$auto$simplemap.cc:420:simplemap_dff$301.INIT (port=Q, net=\PB_cnt [2]) to 1'0.
Setting example.$auto$simplemap.cc:420:simplemap_dff$303.INIT (port=Q, net=\PB_cnt [4]) to 1'0.
Setting example.$auto$simplemap.cc:420:simplemap_dff$304.INIT (port=Q, net=\PB_cnt [5]) to 1'0.
Setting example.$auto$simplemap.cc:420:simplemap_dff$305.INIT (port=Q, net=\PB_cnt [6]) to 1'0.
Setting example.$auto$simplemap.cc:420:simplemap_dff$302.INIT (port=Q, net=\PB_cnt [3]) to 1'0.
Setting example.$auto$simplemap.cc:420:simplemap_dff$307.INIT (port=Q, net=\PB_cnt [8]) to 1'0.
Setting example.$auto$simplemap.cc:420:simplemap_dff$308.INIT (port=Q, net=\PB_cnt [9]) to 1'0.
Setting example.$auto$simplemap.cc:420:simplemap_dff$309.INIT (port=Q, net=\PB_cnt [10]) to 1'0.
Setting example.$auto$simplemap.cc:420:simplemap_dff$310.INIT (port=Q, net=\PB_cnt [11]) to 1'0.
Setting example.$auto$simplemap.cc:420:simplemap_dff$311.INIT (port=Q, net=\PB_cnt [12]) to 1'0.
Setting example.$auto$simplemap.cc:420:simplemap_dff$312.INIT (port=Q, net=\PB_cnt [13]) to 1'0.
Setting example.$auto$simplemap.cc:420:simplemap_dff$313.INIT (port=Q, net=\PB_cnt [14]) to 1'0.
Setting example.$auto$simplemap.cc:420:simplemap_dff$298.INIT (port=Q, net=\state [1]) to 1'0.
Setting example.$auto$simplemap.cc:442:simplemap_dffe$252.INIT (port=Q, net=\PB_state) to 1'0.
Setting example.$auto$simplemap.cc:420:simplemap_dff$297.INIT (port=Q, net=\state [0]) to 1'0.
Setting example.$auto$simplemap.cc:420:simplemap_dff$316.INIT (port=Q, net=\PB_sync_0) to 1'0.
Removed 0 unused cells and 130 unused wires.

2.21. Executing HIERARCHY pass (managing design hierarchy).

2.21.1. Analyzing design hierarchy..
Top module:  \example

2.21.2. Analyzing design hierarchy..
Top module:  \example
Removed 0 unused modules.

2.22. Printing statistics.

=== example ===

   Number of wires:                 53
   Number of wire bits:            104
   Number of public wires:           9
   Number of public wire bits:      29
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                101
     $_DLATCH_P_                     2
     FDRE                           21
     LUT1                            3
     LUT2                           22
     LUT4                            1
     LUT5                            3
     LUT6                           11
     MUXCY                          15
     MUXF7                           5
     MUXF8                           2
     XORCY                          16

2.23. Executing CHECK pass (checking for obvious problems).
checking module example..
found and reported 0 problems.

2.24. Executing EDIF backend.

End of script. Logfile hash: e025e9074d, CPU: user 2.18s system 0.21s
Yosys 0.7+349 (git sha1 45cc1276, AppleClang 9.0.0.9000037,  -Wall -Wextra -MD  -Os -fPIC -ggdb)
Time spent: 72% 15x read_verilog (1 sec), 9% 1x share (0 sec), ...
